/**
 * @file    TestHungarianAlgorithm.cpp
 *
 * @author  btran
 *
 */

#include <gtest/gtest.h>

#include <hungarian_algorithm/HungarianAlgorithm.hpp>

TEST(TestHungarianAlgorithm, TestCase1)
{
    // test case from
    // https://github.com/benchaplin/hungarian-algorithm

    {
        std::vector<double> cost = {
            -22,  -14,  -120, -21, -4,   -51,  //
            -19,  -12,  -172, -21, -28,  -43,  //
            -161, -122, -2,   -50, -128, -39,  //
            -19,  -22,  -90,  -11, -28,  -4,   //
            -1,   -30,  -113, -14, -28,  -86,  //
            -60,  -70,  -170, -28, -68,  -104  //
        };

        std::vector<int> assignments = {4, 1, 2, 5, 0, 3};

        int numRows = 6;
        int numCols = 6;

        auto assignmentsResult = hungarian::solve(cost.data(), numRows, numCols);
        for (int i = 0; i < numRows; ++i) {
            ASSERT_EQ(assignments[i], assignmentsResult[i]);
        }
    }

    {
        std::vector<double> cost = {
            -22,  -14,  -120, -21, -4,   -51,  -1000,  //
            -19,  -12,  -172, -21, -28,  -43,  -1000,  //
            -161, -122, -2,   -50, -128, -39,  -1000,  //
            -19,  -22,  -90,  -11, -28,  -4,   -1000,  //
            -1,   -30,  -113, -14, -28,  -86,  -1000,  //
            -60,  -70,  -170, -28, -68,  -104, -1000   //
        };

        std::vector<int> assignments = {4, 1, 2, 5, 0, 3};

        int numRows = 6;
        int numCols = 7;

        auto assignmentsResult = hungarian::solve(cost.data(), numRows, numCols);

        for (int i = 0; i < numRows; ++i) {
            ASSERT_EQ(assignments[i], assignmentsResult[i]);
        }
    }

    {
        std::vector<double> cost = {
            -22,   -14,   -120,  -21,   -4,    -51,    //
            -19,   -12,   -172,  -21,   -28,   -43,    //
            -161,  -122,  -2,    -50,   -128,  -39,    //
            -19,   -22,   -90,   -11,   -28,   -4,     //
            -1,    -30,   -113,  -14,   -28,   -86,    //
            -60,   -70,   -170,  -28,   -68,   -104,   //
            -1000, -1000, -1000, -1000, -1000, -1000,  //
        };

        std::vector<int> assignments = {4, 1, 2, 5, 0, 3, -1};

        int numRows = 7;
        int numCols = 6;

        auto assignmentsResult = hungarian::solve(cost.data(), numRows, numCols);

        for (int i = 0; i < numRows; ++i) {
            ASSERT_EQ(assignments[i], assignmentsResult[i]);
        }
    }
}

TEST(TestHungarianAlgorithm, TestCase2)
{
    // test case generated with the following snippet
    /*
      import numpy as np
      from scipy.optimize import linear_sum_assignment
      np.random.seed(2021)
      max_cost = np.random.rand(20, 20) * 100
      min_cost = -max_cost
      _, col_ind = linear_sum_assignment(min_cost)
     */

    std::vector<double> cost = {
        60.597827880740475, 73.33693611934982,  13.894715672839874, 31.267308385468695, 99.72432813403186,
        12.816237541896069, 17.899310595018804, 75.29254287760938,  66.2160514309534,   78.43101321411227,
        9.689439592486082,  5.8571285088036,    96.23959902103917,  61.65574438945741,  8.662996124854716,
        56.12723625001966,  61.65247086179902,  96.3843022875632,   57.43042944546707,  37.11608481577816,
        45.21452437895643,  20.18502478346196,  56.93051180505726,  19.509597434211535, 58.370401632397794,
        47.63134735921163,  51.78144003011741,  82.3098633965347,   73.22250269389909,  6.905627482497878,
        67.21289350965124,  64.34848063436797,  82.8014370259165,   20.44693943548337,  61.74889534311008,
        61.770101202222705, 30.106862076416107, 87.17405856038457,  58.96540820670397,  98.17700925910559,
        44.22322335096636,  12.631768556209899, 50.88309005478943,  43.178618379768785, 91.59395639724234,
        70.90156424220608,  89.06553870804991,  58.88856078614311,  63.68299245545494,  34.22089370230583,
        82.37911827912858,  30.515077212245945, 30.754346535141575, 20.132266226177464, 26.516494861388594,
        65.09237544515739,  15.461480842017771, 38.86994990465277,  64.76141435022087,  84.82991154276705,
        6.383649886041132,  41.44411782537517,  33.22442487371482,  72.13209754254363,  47.384730167878416,
        79.86413367877917,  9.086690147631804,  87.45568215920775,  77.69768623350284,  77.15664182642954,
        6.310333059137463,  59.44384833597578,  79.24947331157077,  27.413367775352725, 37.10198129918465,
        85.3114542270778,   67.87289189321663,  75.43774639593944,  41.725723446283155, 32.08987345661007,
        37.22963690271845,  27.535217697012992, 67.95556014879949,  58.16264454827282,  97.01987892075056,
        41.55070416087408,  33.04890674878338,  96.67141624572211,  82.58990429711082,  30.540018344063668,
        82.32779098878181,  55.691044383373836, 71.85010261643131,  87.99369217946592,  49.60100519681214,
        51.20863103237158,  64.85454793662427,  34.33266128619673,  62.26373195013931,  46.45996615701987,
        12.383995678007686, 98.01208580731605,  45.24181297784812,  11.749965451843092, 82.00020269483332,
        17.51301966305576,  23.069819639788758, 70.48174267571572,  71.76477062152762,  14.824829515675885,
        39.3682256118828,   80.26181145096503,  81.01886312737493,  79.60027989905386,  85.79894478476089,
        29.674024370324236, 15.884362686639097, 68.61431092055106,  73.35452275846941,  14.800567783007622,
        26.667988631897423, 38.24070525240525,  50.355847153575,    65.71627876285649,  75.19242629584768,
        6.748188828918278,  21.09636675325104,  67.40734551052628,  89.72295606638336,  76.21148984307104,
        81.64321868965601,  60.95320989457874,  59.06966830423745,  85.45341081253746,  63.265499673180905,
        86.8411705608245,   41.641960601156605, 65.7412921317226,   90.54142498052796,  8.01849192393843,
        68.04952820252477,  8.338929039609177,  20.89871312698103,  83.83153951411015,  52.23785568046802,
        72.14292561428125,  86.23531048067278,  76.88186819543485,  67.7331512582485,   55.52127972238486,
        79.54073603522293,  2.1951147482098476, 40.748950345379434, 94.56506080878953,  94.44838319056285,
        61.51063401185258,  73.62588155825509,  12.77222159941922,  60.95409165236683,  6.2324281820898,
        59.72338162459716,  42.825156386732424, 41.74613243373004,  87.11725296435812,  76.19742590505619,
        1.8602374150704204, 74.35621809944571,  89.5972920422044,   94.01654674832305,  7.048538996803133,
        65.59538718482789,  37.971350415879776, 42.4859037804165,   53.66899826165451,  60.703198202511,
        40.17808717339834,  30.372582261212855, 67.14532587337474,  58.72585675793688,  24.000667316067858,
        48.33640395659411,  19.255257253536385, 99.40232591915775,  26.772133379889475, 79.14080127060465,
        44.818863125107264, 69.93769147474148,  59.57756982446972,  73.85063306798251,  74.9052123090778,
        29.24318661116747,  34.28727445251371,  0.5039504687552321, 43.19930453875536,  89.40265702068154,
        75.61571568980888,  33.73361940883902,  8.403215638174789,  27.17608269857068,  62.968426234540374,
        0.8720700205637533, 16.813959442848315, 46.352234233728105, 93.47711682470536,  87.56042981950702,
        26.27495493356371,  65.22862506627803,  27.00559599272917,  24.805699270821712, 62.80528410146098,
        2.9392073622016124, 93.41473081683812,  9.058844192454373,  87.86353678986217,  31.358823293607273,
        37.97201379315086,  61.400300820372145, 15.45240184140927,  28.93929621165666,  38.35130706022356,
        37.877713685019074, 32.275566812526165, 22.12877271508863,  79.58302594162987,  20.774427398940066,
        22.584019213697783, 85.24715979835148,  68.17055613511796,  23.778438073036913, 52.428998807347085,
        47.972492005905934, 57.46143402658158,  38.805048814210274, 48.19429402337681,  81.73950125335126,
        82.55427779020695,  99.99181469419315,  98.77424486807426,  67.9030628494809,   40.64036012301968,
        50.99572205628545,  88.93510674994356,  40.14430252335984,  19.903620404698998, 90.18202958006634,
        62.081657475054676, 85.65577724460347,  44.198574335497895, 78.06982709961488,  94.47329642421278,
        69.17569947072923,  97.11909931843851,  53.587752733576465, 14.738085112647726, 52.31533653434369,
        6.048096037089956,  76.2789296436504,   14.350358669329644, 54.643714163419496, 76.66037469059364,
        56.932784055207875, 21.3589190647122,   13.936212862574305, 4.077177088332817,  65.25822985820943,
        52.18909803251399,  63.17929314266072,  67.90007743743159,  23.853556701470758, 12.7012879720657,
        7.260014722992514,  17.990199858027623, 83.26551317838103,  12.6707898559016,   44.4186785052342,
        48.714580048701215, 64.65325182381663,  87.93333210198983,  75.67918728782126,  67.36430647660137,
        87.06007284192786,  66.13366342373938,  31.32050208398711,  8.216884792359892,  0.8668791932796682,
        95.19166472418983,  19.0733815922562,   97.59661267523678,  7.679912392294508,  83.97183453516212,
        29.09760807722218,  29.408652440982262, 86.2724396985666,   42.62223717823308,  24.05693938137532,
        58.19086564278203,  33.33003376148815,  85.19987253404241,  94.99530018635787,  53.910623822514616,
        19.92286772992976,  17.658069656149266, 17.274769218454033, 25.472978222759068, 83.97732596230986,
        46.71357581190222,  24.210688052811967, 4.5297192604821905, 72.68080559005622,  41.54000519829373,
        12.178777788228878, 97.72813764785064,  46.92506571745035,  76.30278171957934,  99.20032142322395,
        53.524159998234744, 69.87775627515906,  97.796273843492,    93.42265039245716,  70.5465774060828,
        80.45894091011573,  52.186766903426964, 62.72411506264874,  59.87993943026568,  1.2721534454503414,
        39.134667626668076, 40.92386935016981,  74.20002171514352,  42.390075745708764, 3.470438615352567,
        92.1815593773098,   81.40822309104898,  2.7657559974335943, 35.6308071485457,   37.268864687173654,
        49.53955264697816,  95.54497999837082,  12.880413223055577, 38.1290661226257,   24.676369001663033,
        5.897292587672364,  64.79978261977065,  35.314495922129105, 68.72059117918457,  62.79064722891605,
        38.37670127437034,  88.53146402023535,  82.09883168741841,  55.33017149849171,  52.41127005849996,
        13.880558729513648, 53.55926447002176,  15.960380906967686, 46.659950561347706, 24.062513844320954,
        19.718750269213903, 32.690014392772305, 17.87528868741701,  66.59689688661517,  75.4556899401983,
        24.634768857656397, 10.395807145232705, 53.56512984423634,  31.842293633058393, 72.99024619710907,
        64.62824547832064,  1.4578772000054085, 92.76986440716786,  38.38022062244614,  23.15902269239791,
        69.8154662484992,   9.781158163430293,  4.337309543212009,  81.49529843109946,  39.76325245691604,
        12.987825323114643, 55.81201689761396,  89.15803772304986,  18.49323825813861,  25.103233271152025,
        44.425279095683514, 11.069016942835097, 27.940636497570893, 59.2762768668291,   12.4117430202214,
        13.78440718327072,  99.7111561391654,   87.90634912620901,  81.93743195275182,  89.25353912612205,
        32.41654869901289,  17.925200227737292, 64.62643270522446,  27.882464378978934, 92.07896882874533,
        28.940509058411358, 38.980999975263096, 92.47012427025683,  55.913032878822754, 68.01800890948556};

    int numRows = 20;
    int numCols = 20;

    auto assignmentsResult = hungarian::solve(cost.data(), numRows, numCols);

    std::vector<int> assignments = {12, 19, 10, 15, 4, 1, 18, 13, 8, 2, 3, 16, 11, 17, 5, 14, 0, 6, 7, 9};

    for (int i = 0; i < numRows; ++i) {
        ASSERT_EQ(assignments[i], assignmentsResult[i]);
    }
}
